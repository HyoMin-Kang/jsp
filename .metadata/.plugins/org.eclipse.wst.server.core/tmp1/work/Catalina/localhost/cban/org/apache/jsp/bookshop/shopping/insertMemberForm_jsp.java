/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.50
 * Generated at: 2018-06-10 12:36:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bookshop.shopping;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insertMemberForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("utf-8");
	String title = "Book Shopping Mall";

      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../module/header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(title ), request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<main role=\"main\" class=\"container\">\r\n");
      out.write("<h3 class=\"pb-3 mb-4 font-italic border-bottom\">회원 가입</h3>\r\n");
      out.write("\r\n");
      out.write("<form name=\"insertMember\" method=\"post\" action=\"insertMemberPro.jsp\" onsubmit=\"return formSubmit();\">\r\n");
      out.write("\t<div class=\"form-group row\">\r\n");
      out.write("\t\t<label for=\"inputId\" class=\"col-md-2 col-form-label\">아이디</label>\r\n");
      out.write("\t\t<div class=\"col-md-8\">\r\n");
      out.write("\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputId\" name=\"id\" placeholder=\"Enter ID\" required=\"required\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t<Button type=\"button\" class=\"btn btn-outline-dark btn-block\" onClick=\"confirmId(document.getElementById('inputId'));\">중복 확인</Button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"form-group row\">\r\n");
      out.write("\t\t<label for=\"inputPasswd\" class=\"col-md-2 col-form-label\">비밀번호</label>\r\n");
      out.write("\t\t<div class=\"col-md-10\">\r\n");
      out.write("\t\t\t<input type=\"password\" class=\"form-control\" id=\"inputPasswd\" name=\"passwd\" placeholder=\"Password\" required=\"required\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"form-group row\">\r\n");
      out.write("\t\t<label for=\"inputName\" class=\"col-md-2 col-form-label\">이름</label>\r\n");
      out.write("\t\t<div class=\"col-md-10\">\r\n");
      out.write("\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputName\" name=\"name\" placeholder=\"Name\" required=\"required\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"form-group row\">\r\n");
      out.write("\t\t<label class=\"col-md-2 col-form-label\">주소</label>\r\n");
      out.write("\t\t<div class=\"col-md-10\">\r\n");
      out.write("\t\t\t<div class=\"input-group mb-3\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputPostcode\" name=\"postcode\" placeholder=\"Postcode\" readonly=\"readonly\">\r\n");
      out.write("\t\t\t\t<div class=\"input-group-append\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-secondary\" onclick=\"execDaumPostcode()\">우편번호 찾기</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputAddress\" name=\"address\" placeholder=\"Address\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"form-group row\">\r\n");
      out.write("\t\t<label class=\"col-md-2 col-form-label\">전화번호</label>\r\n");
      out.write("\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t<select class=\"form-control\" name=\"tel1\">\r\n");
      out.write("\t\t\t\t<option selected></option>\r\n");
      out.write("\t\t\t\t<option value=\"010\">010</option>\r\n");
      out.write("\t\t\t\t<option value=\"011\">011</option>\r\n");
      out.write("\t\t\t\t<option value=\"012\">012</option>\r\n");
      out.write("\t\t\t</select>\r\n");
      out.write("\t\t</div>-\r\n");
      out.write("\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t<input type=\"text\" class=\"form-control\" name=\"tel2\" maxlength=\"4\">\r\n");
      out.write("\t\t</div>-\r\n");
      out.write("\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t<input type=\"text\" class=\"form-control\" name=\"tel3\" maxlength=\"4\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"form-group row\">\r\n");
      out.write("\t\t<label class=\"col-md-2 col-form-label\">자동 가입 방지</label>\r\n");
      out.write("\t\t<div class=\"col-md-10\">\r\n");
      out.write("\t\t\t<div id=\"html_element\"></div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<button type=\"reset\" class=\"btn btn-outline-secondary\">Reset</button>\r\n");
      out.write("\t<button type=\"submit\" class=\"btn btn-outline-primary\" id=\"checkId\">Submit</button>\r\n");
      out.write("</form>\r\n");
      out.write("</main> <!-- /.container -->\r\n");
      out.write("\r\n");
      out.write("<!-- address api -->\r\n");
      out.write("<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction execDaumPostcode() {\r\n");
      out.write("        new daum.Postcode({\r\n");
      out.write("            oncomplete: function(data) {\r\n");
      out.write("                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("                // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("                var fullAddr = ''; // 최종 주소 변수\r\n");
      out.write("                var extraAddr = ''; // 조합형 주소 변수\r\n");
      out.write("\r\n");
      out.write("                // 사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("                if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("                    fullAddr = data.roadAddress;\r\n");
      out.write("\r\n");
      out.write("                } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("                    fullAddr = data.jibunAddress;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // 사용자가 선택한 주소가 도로명 타입일때 조합한다.\r\n");
      out.write("                if(data.userSelectedType === 'R'){\r\n");
      out.write("                    //법정동명이 있을 경우 추가한다.\r\n");
      out.write("                    if(data.bname !== ''){\r\n");
      out.write("                        extraAddr += data.bname;\r\n");
      out.write("                    }\r\n");
      out.write("                    // 건물명이 있을 경우 추가한다.\r\n");
      out.write("                    if(data.buildingName !== ''){\r\n");
      out.write("                        extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                    }\r\n");
      out.write("                    // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.\r\n");
      out.write("                    fullAddr += (extraAddr !== '' ? ' ('+ extraAddr +')' : '');\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                document.getElementById('inputPostcode').value = data.zonecode; //5자리 새우편번호 사용\r\n");
      out.write("                document.getElementById('inputAddress').value = fullAddr;\r\n");
      out.write("                // 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("                document.getElementById('inputAddress').focus();\r\n");
      out.write("            }\r\n");
      out.write("        }).open();\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- reCaptcha -->\r\n");
      out.write("<script src='https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit' async defer></script>\r\n");
      out.write("<script>\r\n");
      out.write("\tvar onloadCallback = function() {\r\n");
      out.write("\t\tgrecaptcha.render('html_element', {\r\n");
      out.write("\t          'sitekey' : '6Ldu9VUUAAAAANn65F6UQgOt0cO2R9oTchhjmiJi'\r\n");
      out.write("\t    });\r\n");
      out.write("\t};\r\n");
      out.write("\tvar onReturnCallback = function() {\r\n");
      out.write("\t\tvar url = 'https://www.google.com/recaptcha/api/siteverify';\r\n");
      out.write("\t};\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction formSubmit() {\r\n");
      out.write("\t\tif (grecaptcha.getResponse() == '') {\r\n");
      out.write("\t\t\talert('자동 가입 방지 체크를 확인해주세요.');\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("</script> \r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function confirmId(id) {\r\n");
      out.write("\tif(id.value.length==0) {\r\n");
      out.write("\t\talert('ID를 입력해 주세요.');\r\n");
      out.write("\t\tinputId.focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t//중복 확인 새창\r\n");
      out.write("\turl = 'idCheck.jsp?id=' + id.value;\r\n");
      out.write("\topen(url, 'ID 중복 체크', 'height=200, width=320, menubar=no, scrollbars=no, toolbar=no, location=no, status=no, resizable=no');\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../module/footer.jsp", out, false);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
